// <auto-generated />
using System;
using DreamTrackerAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DreamTrackerAPI.Migrations
{
    [DbContext(typeof(DreamTrackerDbContext))]
    [Migration("20250621232146_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DreamTrackerAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Meta-dreams"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nightmares"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lucid Dreams"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Recurring Dreams"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Flying Dreams"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Chase Dreams"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Prophetic Dreams"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Surreal & Symbolic Dreams"
                        });
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.Dream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowAuthor")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Dreams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "I was dreaming that I was dreaming. Layers upon layers.",
                            CreatedOn = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            ShowAuthor = false,
                            Title = "Dream within a dream",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Content = "Just falling through darkness. Never landing.",
                            CreatedOn = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = false,
                            ShowAuthor = false,
                            Title = "Falling endlessly",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            Content = "Taking the same exam over and over.",
                            CreatedOn = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = false,
                            ShowAuthor = false,
                            Title = "Back in high school again",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            Content = "Flying without effort, seeing the skyline shift below.",
                            CreatedOn = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            ShowAuthor = true,
                            Title = "Soaring over cities",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 6,
                            Content = "The more I run, the slower I move. I wake up breathless.",
                            CreatedOn = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = false,
                            ShowAuthor = false,
                            Title = "Being chased but never caught",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 8,
                            Content = "She swam silently through the kitchen tiles. I think I've been reading too much Faulkner.",
                            CreatedOn = new DateTime(2024, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            ShowAuthor = false,
                            Title = "My mother was a fish",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Content = "I realized I was dreaming and took control. I flew over a desert.",
                            CreatedOn = new DateTime(2024, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            ShowAuthor = true,
                            Title = "Woke up inside the dream",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 7,
                            Content = "I saw a clock with no hands ticking louder and louder. Then silence.",
                            CreatedOn = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = false,
                            ShowAuthor = false,
                            Title = "The clock with no hands",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 8,
                            Content = "Water was everywhere, but only on the ceiling. I swam upward through air.",
                            CreatedOn = new DateTime(2024, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPublic = true,
                            ShowAuthor = false,
                            Title = "Swimming through the ceiling",
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.DreamTag", b =>
                {
                    b.Property<int>("DreamId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("DreamId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DreamTags");

                    b.HasData(
                        new
                        {
                            DreamId = 1,
                            TagId = 3
                        },
                        new
                        {
                            DreamId = 1,
                            TagId = 4
                        },
                        new
                        {
                            DreamId = 2,
                            TagId = 2
                        },
                        new
                        {
                            DreamId = 3,
                            TagId = 7
                        },
                        new
                        {
                            DreamId = 3,
                            TagId = 8
                        },
                        new
                        {
                            DreamId = 4,
                            TagId = 1
                        },
                        new
                        {
                            DreamId = 4,
                            TagId = 9
                        },
                        new
                        {
                            DreamId = 5,
                            TagId = 2
                        },
                        new
                        {
                            DreamId = 5,
                            TagId = 5
                        },
                        new
                        {
                            DreamId = 6,
                            TagId = 4
                        },
                        new
                        {
                            DreamId = 6,
                            TagId = 10
                        },
                        new
                        {
                            DreamId = 6,
                            TagId = 11
                        },
                        new
                        {
                            DreamId = 6,
                            TagId = 7
                        },
                        new
                        {
                            DreamId = 7,
                            TagId = 1
                        },
                        new
                        {
                            DreamId = 7,
                            TagId = 9
                        },
                        new
                        {
                            DreamId = 8,
                            TagId = 4
                        },
                        new
                        {
                            DreamId = 8,
                            TagId = 8
                        },
                        new
                        {
                            DreamId = 9,
                            TagId = 10
                        },
                        new
                        {
                            DreamId = 9,
                            TagId = 11
                        },
                        new
                        {
                            DreamId = 9,
                            TagId = 6
                        });
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.Favorite", b =>
                {
                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("DreamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FavoritedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserProfileId", "DreamId");

                    b.HasIndex("DreamId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            UserProfileId = 2,
                            DreamId = 6,
                            FavoritedOn = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Joy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fear"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Awe"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Confusion"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Anger"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Love"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sadness"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Anxiety"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Wonder"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Surreal"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Absurdity"
                        });
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "202 Sleep Lane",
                            FirstName = "Lucy",
                            IdentityUserId = "b2f0a5a7-55f6-4b6e-a12f-89ef34d9ec3c",
                            LastName = "Dreamer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "211adcc0-1500-45d7-8405-fcacf917094c",
                            Email = "admina@strator.comx",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINA@STRATOR.COMX",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEPHtr3pC9/Li2edAPwVjHkvh3N3PTaPMYObOurOEVcR/mVIB8nglbFN813sbv1wNlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84f4dc76-6fb4-4abd-ae14-aa54f88533a7",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "b2f0a5a7-55f6-4b6e-a12f-89ef34d9ec3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5390448e-2e8b-441c-8d25-c4a97f3f0d0a",
                            Email = "lucy@dream.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCY@DREAM.COM",
                            NormalizedUserName = "LUCY",
                            PasswordHash = "AQAAAAIAAYagAAAAEDvLpOMexGoD+ONU/5/DG57BppMPZAIRFC0G30EaHOJDi+ObFotq1ed71imwuNGPcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f4de5ad-2091-46a9-98a7-ab1d9e87cee3",
                            TwoFactorEnabled = false,
                            UserName = "lucy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.Dream", b =>
                {
                    b.HasOne("DreamTrackerAPI.Models.Category", "Category")
                        .WithMany("Dreams")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTrackerAPI.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.DreamTag", b =>
                {
                    b.HasOne("DreamTrackerAPI.Models.Dream", "Dream")
                        .WithMany("DreamTags")
                        .HasForeignKey("DreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTrackerAPI.Models.Tag", "Tag")
                        .WithMany("DreamTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dream");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.Favorite", b =>
                {
                    b.HasOne("DreamTrackerAPI.Models.Dream", "Dream")
                        .WithMany()
                        .HasForeignKey("DreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTrackerAPI.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dream");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.Category", b =>
                {
                    b.Navigation("Dreams");
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.Dream", b =>
                {
                    b.Navigation("DreamTags");
                });

            modelBuilder.Entity("DreamTrackerAPI.Models.Tag", b =>
                {
                    b.Navigation("DreamTags");
                });
#pragma warning restore 612, 618
        }
    }
}
